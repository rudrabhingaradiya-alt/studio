
'use server';

/**
 * @fileOverview Generates a new chess bot, including its personality and avatar.
 *
 * - createBot - A function that creates a new chess bot.
 * - CreateBotInput - The input type for the createBot function.
 * - CreateBotOutput - The return type for the createBot function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const CreateBotInputSchema = z.object({
  name: z.string().describe('The name of the new chess bot.'),
  prompt: z
    .string()
    .describe('A user-provided prompt describing the desired personality and style of the bot.'),
});
export type CreateBotInput = z.infer<typeof CreateBotInputSchema>;

const CreateBotOutputSchema = z.object({
  rating: z.number().describe("The bot's generated chess rating (e.g., 800, 1500, 2200)."),
  personality: z
    .string()
    .describe("A brief description of the bot's playing style and personality, generated by the AI."),
  avatar: z
    .string()
    .describe(
      "The generated avatar image as a data URI. Should be in 'data:image/png;base64,<encoded_data>' format."
    ),
});
export type CreateBotOutput = z.infer<typeof CreateBotOutputSchema>;

export async function createBot(input: CreateBotInput): Promise<CreateBotOutput> {
  return createBotFlow(input);
}

const botCreationTool = ai.defineTool(
  {
    name: 'createBotTool',
    description: 'Generates the personality, rating, and avatar for a new chess bot based on a user prompt.',
    inputSchema: CreateBotInputSchema,
    outputSchema: z.object({
        rating: z.number(),
        personality: z.string(),
    }),
  },
  async (input) => {
    // This is a placeholder for a more complex implementation.
    // In a real scenario, you might analyze the prompt to determine a suitable rating.
    return {
      rating: Math.floor(Math.random() * (2200 - 800 + 1)) + 800,
      personality: `A bot inspired by: ${input.prompt}`,
    };
  }
);


const createBotFlow = ai.defineFlow(
  {
    name: 'createBotFlow',
    inputSchema: CreateBotInputSchema,
    outputSchema: CreateBotOutputSchema,
  },
  async (input) => {
    
    // Step 1: Generate bot personality and rating
    const profileGen = await ai.generate({
        prompt: `Generate a chess bot profile based on the following prompt: "${input.prompt}". Create a personality and a rating for a bot named "${input.name}".`,
        tools: [botCreationTool],
        model: 'googleai/gemini-2.5-flash'
    });

    const toolResponse = profileGen.toolRequest();
    if (!toolResponse?.tool?.name || toolResponse.tool.name !== 'createBotTool') {
        throw new Error("Failed to get bot profile from AI.");
    }
    const profile = toolResponse.tool.input;


    // Step 2: Generate bot avatar based on the generated profile
    const avatarGen = await ai.generate({
      model: 'googleai/gemini-2.5-flash-image-preview',
      prompt: [
        {
          text: `Generate a photorealistic headshot avatar for a chess bot. The avatar should be a portrait of a man or a woman that visually represents the bot's name, rating, and personality.

Bot Name: ${input.name}
Rating: ${profile.rating}
Personality: ${profile.personality}

Style Guidelines:
- The avatar should be a high-quality, realistic photograph of a person.
- The person's expression and appearance should match the bot's personality.
- The background should be a simple, professional, or abstract setting suitable for a profile picture.
- The image should be square.
- Do NOT include any text, letters, or numbers in the image.`,
        },
      ],
      config: {
        responseModalities: ['TEXT', 'IMAGE'],
      },
    });

    const avatarDataUri = avatarGen.media.url;
    if (!avatarDataUri) {
      throw new Error('Image generation failed to produce an avatar.');
    }

    return {
      rating: profile.rating,
      personality: profile.personality,
      avatar: avatarDataUri,
    };
  }
);
