/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for user data and allows public read access to puzzles.
 *
 * Data Structure:
 * - /users/{userId}: Stores user account information. Only the authenticated user can access their own data.
 * - /users/{userId}/user_profile/{userProfileId}: Stores user profile information. Only the authenticated user can access their profile.
 * - /puzzles/{puzzleId}: Stores chess puzzle data. Publicly accessible (read-only). Write access restricted to admins (TODO).
 * - /users/{userId}/puzzle_history/{puzzleHistoryId}: Stores the puzzle history for a specific user. Only the authenticated user can access their puzzle history.
 *
 * Key Security Decisions:
 * - User data is strictly segregated and only accessible to the owning user.
 * - Puzzle data is publicly readable to allow broad access to game content.
 * - The rules do NOT currently validate the data types or presence of optional fields beyond ownership, for rapid prototyping.
 *
 * Denormalization for Authorization:
 * - User ownership is enforced through path-based rules (e.g., /users/{userId}), avoiding the need for `get()` calls to verify ownership.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user account information.
     * @path /users/{userId}
     * @allow (create) - User with ID 'user123' can create their own document.
     * @allow (get) - User with ID 'user123' can read their own document.
     * @allow (update) - User with ID 'user123' can update their own document.
     * @allow (delete) - User with ID 'user123' can delete their own document.
     * @deny (create) - User with ID 'user456' cannot create a document with ID 'user123'.
     * @deny (get) - User with ID 'user456' cannot read the document of 'user123'.
     * @deny (update) - User with ID 'user456' cannot update the document of 'user123'.
     * @deny (delete) - User with ID 'user456' cannot delete the document of 'user123'.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      // Allows a user to read their own document.
      allow get: if isSignedIn() && isOwner(userId);
      // Allows a user to list all users (disabled by default).
      allow list: if false;
      // Allows a user to create their own document with a matching ID.
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      // Allows a user to update their own document.  The `id` field is immutable.
      allow update: if isSignedIn() && isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      // Allows a user to delete their own document.
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Controls access to user profile information.
     * @path /users/{userId}/user_profile/{userProfileId}
     * @allow (create) - User with ID 'user123' can create their own profile.
     * @allow (get) - User with ID 'user123' can read their own profile.
     * @allow (update) - User with ID 'user123' can update their own profile.
     * @allow (delete) - User with ID 'user123' can delete their own profile.
     * @deny (create) - User with ID 'user456' cannot create a profile for 'user123'.
     * @deny (get) - User with ID 'user456' cannot read the profile of 'user123'.
     * @deny (update) - User with ID 'user456' cannot update the profile of 'user123'.
     * @deny (delete) - User with ID 'user456' cannot delete the profile of 'user123'.
     * @principle Enforces document ownership for all operations under the user's path.
     */
    match /users/{userId}/user_profile/{userProfileId} {
      // Allows a user to read their own profile.
      allow get: if isSignedIn() && isOwner(userId);
      // Allows a user to list profiles (disabled by default).
      allow list: if false;
      // Allows a user to create their own profile. The userId must match the path.
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      // Allows a user to update their own profile.  The userId is immutable.
      allow update: if isSignedIn() && isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      // Allows a user to delete their own profile.
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Controls access to chess puzzle data.
     * @path /puzzles/{puzzleId}
     * @allow (get) - Any user can read puzzle data.
     * @allow (list) - Any user can list puzzle data.
     * @deny (create) - Only admins should be able to create puzzles (TODO).
     * @deny (update) - Only admins should be able to update puzzles (TODO).
     * @deny (delete) - Only admins should be able to delete puzzles (TODO).
     * @principle Allows public read access with restricted write access.
     */
    match /puzzles/{puzzleId} {
      // Allows anyone to read puzzle data.
      allow get, list: if true;
      // Only admins should be able to create, update, or delete puzzles.
      allow create, update, delete: if false; // TODO: Add admin validation once the schema is updated with an admin role or ownership field.
    }

    /**
     * @description Controls access to puzzle history data for a specific user.
     * @path /users/{userId}/puzzle_history/{puzzleHistoryId}
     * @allow (create) - User with ID 'user123' can create their own puzzle history.
     * @allow (get) - User with ID 'user123' can read their own puzzle history.
     * @allow (update) - User with ID 'user123' can update their own puzzle history.
     * @allow (delete) - User with ID 'user123' can delete their own puzzle history.
     * @deny (create) - User with ID 'user456' cannot create a puzzle history for 'user123'.
     * @deny (get) - User with ID 'user456' cannot read the puzzle history of 'user123'.
     * @deny (update) - User with ID 'user456' cannot update the puzzle history of 'user123'.
     * @deny (delete) - User with ID 'user456' cannot delete the puzzle history of 'user123'.
     * @principle Enforces document ownership for all operations under the user's path.
     */
    match /users/{userId}/puzzle_history/{puzzleHistoryId} {
      // Allows a user to read their own puzzle history.
      allow get: if isSignedIn() && isOwner(userId);
      // Allows a user to list their own puzzle history.
      allow list: if isSignedIn() && isOwner(userId);
      // Allows a user to create their own puzzle history. The userId must match the path.
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      // Allows a user to update their own puzzle history. The userId is immutable.
      allow update: if isSignedIn() && isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      // Allows a user to delete their own puzzle history.
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }
  }
}

/**
 * @description Checks if the user is signed in.
 * @returns {boolean} True if the user is signed in, false otherwise.
 */
function isSignedIn() {
  return request.auth != null;
}

/**
 * @description Checks if the user is the owner of the document.
 * @param {string} userId The user ID to check against.
 * @returns {boolean} True if the user is the owner, false otherwise.
 */
function isOwner(userId) {
  return request.auth.uid == userId;
}

/**
 * @description Checks if the user is the owner of the existing document.
 * @param {string} userId The user ID to check against.
 * @returns {boolean} True if the user is the owner and the document exists, false otherwise.
 */
function isExistingOwner(userId) {
  return isSignedIn() && isOwner(userId) && resource != null;
}